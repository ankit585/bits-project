<?php


/**
 * TrafficDensity Value Object.
 * This class is value object representing database table TrafficDensity
 * This class is intented to be used together with associated Dao object.
 */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */




class TrafficDensity
{

        /**
         * Persistent Instance variables. This data is directly
         * mapped to the columns of database table.
         */
        var $routeId;
        var $legId;
        var $density;



        /**
         * Constructors. DaoGen generates two constructors by default.
         * The first one takes no arguments and provides the most simple
         * way to create object instance. The another one takes one
         * argument, which is the primary key of the corresponding table.
         */

        function TrafficDensity () {

        }

        /* function TrafficDensity ($routeIdIn, $legIdIn) {

              $this->routeId = $routeIdIn;
              $this->legId = $legIdIn;

        } */


        /**
         * Get- and Set-methods for persistent variables. The default
         * behaviour does not make any checks against malformed data,
         * so these might require some manual additions.
         */

        function getRouteId() {
                return $this->routeId;
        }
        function setRouteId($routeIdIn) {
                $this->routeId = $routeIdIn;
        }

        function getLegId() {
                return $this->legId;
        }
        function setLegId($legIdIn) {
                $this->legId = $legIdIn;
        }

        function getDensity() {
                return $this->density;
        }
        function setDensity($densityIn) {
                $this->density = $densityIn;
        }



        /**
         * setAll allows to set all persistent variables in one method call.
         * This is useful, when all data is available and it is needed to
         * set the initial state of this object. Note that this method will
         * directly modify instance variales, without going trough the
         * individual set-methods.
         */

        function setAll($routeIdIn,
                        $legIdIn,
                        $densityIn) {
                $this->routeId = $routeIdIn;
                $this->legId = $legIdIn;
                $this->density = $densityIn;
        }


        /**
         * hasEqualMapping-method will compare two TrafficDensity instances
         * and return true if they contain same values in all persistent instance
         * variables. If hasEqualMapping returns true, it does not mean the objects
         * are the same instance. However it does mean that in that moment, they
         * are mapped to the same row in database.
         */
        function hasEqualMapping($valueObject) {

                if ($valueObject->getRouteId() != $this->routeId) {
                        return(false);
                }
                if ($valueObject->getLegId() != $this->legId) {
                        return(false);
                }
                if ($valueObject->getDensity() != $this->density) {
                        return(false);
                }

                return true;
        }



        /**
         * toString will return String object representing the state of this
         * valueObject. This is useful during application development, and
         * possibly when application is writing object states in textlog.
         */
        function toString() {
                $out = $this->getDaogenVersion();
                $out = $out."\nclass TrafficDensity, mapping to table TrafficDensity\n";
                $out = $out."Persistent attributes: \n";
                $out = $out."routeId = ".$this->routeId."\n";
                $out = $out."legId = ".$this->legId."\n";
                $out = $out."density = ".$this->density."\n";
                return $out;
        }


        /**
         * Clone will return identical deep copy of this valueObject.
         * Note, that this method is different than the clone() which
         * is defined in java.lang.Object. Here, the retuned cloned object
         * will also have all its attributes cloned.
         */
        /*function clone() {
            $cloned = new TrafficDensity();

            $cloned->setRouteId($this->routeId);
            $cloned->setLegId($this->legId);
            $cloned->setDensity($this->density);

            return $cloned;
        }*/



        /**
         * getDaogenVersion will return information about
         * generator which created these sources.
         */
        function getDaogenVersion() {
                return "DaoGen version 2.4.1";
        }

}

?>
